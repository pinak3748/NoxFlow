// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/monitoring.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogStreamingService_StreamLogs_FullMethodName = "/monitoring.LogStreamingService/StreamLogs"
)

// LogStreamingServiceClient is the client API for LogStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamingServiceClient interface {
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogData, LogResponse], error)
}

type logStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamingServiceClient(cc grpc.ClientConnInterface) LogStreamingServiceClient {
	return &logStreamingServiceClient{cc}
}

func (c *logStreamingServiceClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogData, LogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogStreamingService_ServiceDesc.Streams[0], LogStreamingService_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogData, LogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamingService_StreamLogsClient = grpc.BidiStreamingClient[LogData, LogResponse]

// LogStreamingServiceServer is the server API for LogStreamingService service.
// All implementations must embed UnimplementedLogStreamingServiceServer
// for forward compatibility.
type LogStreamingServiceServer interface {
	StreamLogs(grpc.BidiStreamingServer[LogData, LogResponse]) error
	mustEmbedUnimplementedLogStreamingServiceServer()
}

// UnimplementedLogStreamingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogStreamingServiceServer struct{}

func (UnimplementedLogStreamingServiceServer) StreamLogs(grpc.BidiStreamingServer[LogData, LogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLogStreamingServiceServer) mustEmbedUnimplementedLogStreamingServiceServer() {}
func (UnimplementedLogStreamingServiceServer) testEmbeddedByValue()                             {}

// UnsafeLogStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamingServiceServer will
// result in compilation errors.
type UnsafeLogStreamingServiceServer interface {
	mustEmbedUnimplementedLogStreamingServiceServer()
}

func RegisterLogStreamingServiceServer(s grpc.ServiceRegistrar, srv LogStreamingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogStreamingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogStreamingService_ServiceDesc, srv)
}

func _LogStreamingService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogStreamingServiceServer).StreamLogs(&grpc.GenericServerStream[LogData, LogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamingService_StreamLogsServer = grpc.BidiStreamingServer[LogData, LogResponse]

// LogStreamingService_ServiceDesc is the grpc.ServiceDesc for LogStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.LogStreamingService",
	HandlerType: (*LogStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _LogStreamingService_StreamLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/monitoring.proto",
}

const (
	UsageStreamingService_StreamUsage_FullMethodName = "/monitoring.UsageStreamingService/StreamUsage"
)

// UsageStreamingServiceClient is the client API for UsageStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsageStreamingServiceClient interface {
	StreamUsage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ContainerUsageStats, UsageResponse], error)
}

type usageStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsageStreamingServiceClient(cc grpc.ClientConnInterface) UsageStreamingServiceClient {
	return &usageStreamingServiceClient{cc}
}

func (c *usageStreamingServiceClient) StreamUsage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ContainerUsageStats, UsageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UsageStreamingService_ServiceDesc.Streams[0], UsageStreamingService_StreamUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ContainerUsageStats, UsageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UsageStreamingService_StreamUsageClient = grpc.BidiStreamingClient[ContainerUsageStats, UsageResponse]

// UsageStreamingServiceServer is the server API for UsageStreamingService service.
// All implementations must embed UnimplementedUsageStreamingServiceServer
// for forward compatibility.
type UsageStreamingServiceServer interface {
	StreamUsage(grpc.BidiStreamingServer[ContainerUsageStats, UsageResponse]) error
	mustEmbedUnimplementedUsageStreamingServiceServer()
}

// UnimplementedUsageStreamingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsageStreamingServiceServer struct{}

func (UnimplementedUsageStreamingServiceServer) StreamUsage(grpc.BidiStreamingServer[ContainerUsageStats, UsageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUsage not implemented")
}
func (UnimplementedUsageStreamingServiceServer) mustEmbedUnimplementedUsageStreamingServiceServer() {}
func (UnimplementedUsageStreamingServiceServer) testEmbeddedByValue()                               {}

// UnsafeUsageStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsageStreamingServiceServer will
// result in compilation errors.
type UnsafeUsageStreamingServiceServer interface {
	mustEmbedUnimplementedUsageStreamingServiceServer()
}

func RegisterUsageStreamingServiceServer(s grpc.ServiceRegistrar, srv UsageStreamingServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsageStreamingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsageStreamingService_ServiceDesc, srv)
}

func _UsageStreamingService_StreamUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsageStreamingServiceServer).StreamUsage(&grpc.GenericServerStream[ContainerUsageStats, UsageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UsageStreamingService_StreamUsageServer = grpc.BidiStreamingServer[ContainerUsageStats, UsageResponse]

// UsageStreamingService_ServiceDesc is the grpc.ServiceDesc for UsageStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsageStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.UsageStreamingService",
	HandlerType: (*UsageStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUsage",
			Handler:       _UsageStreamingService_StreamUsage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/monitoring.proto",
}
